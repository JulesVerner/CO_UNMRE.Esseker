//#include "script_component.hpp"

params ["_camera", "_args"];
_args params ["", "_duration", "_target", ["_height", 5], ["_radius", 10], ["_startingAngle", 0], ["_endAngle", 180], ["_clockwise", true], ["_rise", 0]];

if (typeName _target == "CODE") then {
    _target = call _target;
};

GRAD_introCam_camRotateFinish = false;

private _angleDistance = _endAngle - _startingAngle;
if (_clockwise) then {
	if (_endAngle < _startingAngle) then {
		_angleDistance = 360 - _startingAngle + _endAngle;
	};
}else{
	if (_endAngle > _startingAngle) then {
	   _angleDistance = (360 - _endAngle) + _startingAngle;
   };
};

GRAD_introCam_camAngle = _startingAngle;
private _pos = (_target getPos [_radius, _startingAngle]) vectorAdd [0,0,_height];
_camera setPos _pos;
_camera camSetTarget (vehicle _target);
_camera camCommit 0;

private _startTime = time;

[
    {
        params ["_args", "_handle"];
        _args params ["_camera", "_target", "_angleDistance", "_endAngle", "_startTime", "_endTime", "_height", "_radius"];
        if (GRAD_introCam_camAngle > _endAngle || {time > _endTime}) exitWith {
            [_handle] call CBA_fnc_removePerFrameHandler;
            detach _camera;
            GRAD_introCam_camRotateFinish = true;
            GRAD_introCam_camAngle = nil;
            [{GRAD_introCam_camRotateFinish = nil;},[],1] call CBA_fnc_waitAndExecute;
        };
  
        private _remainingTime = _endTime - time; // eg.60
        private _progress = (_angleDistance / _remainingTime) / diag_fps; // 20 / 60

        

        GRAD_introCam_camAngle = GRAD_introCam_camAngle + _progress;

        private _newPos = ((vehicle _target) modelToWorldVisual [0,0,0]) getPos [_radius, GRAD_introCam_camAngle];
        ((vehicle _target) modelToWorldVisual [0,0,0]) params ["_xPos", "_yPos", "_zPos"];
        _newPos set [2, _zPos];
        _camera camSetTarget (_target modelToWorldVisual [0,0,0]);
        _camera camCommit 0;
        _camera setPos _newPos;       

        diag_log (str _progress + " " + str  (_zPos));
    },
    0,
    [_camera, _target, _angleDistance, _endAngle, _startTime, (time + _duration + 0.1), _height, _radius]
]call CBA_fnc_addPerFrameHandler;
